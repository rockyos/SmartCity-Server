// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartCity.Data;

namespace SmartCity.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210327165416_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SmartCity.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PollingPlaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PollingPlaceId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SmartCity.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid>("PollingPlaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PollingPlaceId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BulletinNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("PollingPlaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VotingProgram")
                        .HasColumnType("text");

                    b.Property<DateTime>("VotingYear")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PollingPlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SmartCity.Data.Models.DocumentIssue", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IssueId1")
                        .HasColumnType("uuid");

                    b.HasKey("DocumentId", "IssueId");

                    b.HasIndex("IssueId");

                    b.HasIndex("IssueId1");

                    b.ToTable("DocumentIssues");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssueTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PollingPlaceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("IssueTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PollingPlaceId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("SmartCity.Data.Models.IssueType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IssueTypes");
                });

            modelBuilder.Entity("SmartCity.Data.Models.IssueUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "IssueId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("IssueId");

                    b.ToTable("IssueUser");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("SmartCity.Data.Models.PollingPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("VotingPlaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("PollingPlaces");
                });

            modelBuilder.Entity("SmartCity.Data.Models.UserDocument", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PollingPlaceId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "PollingPlaceId");

                    b.HasIndex("PollingPlaceId");

                    b.ToTable("UserDocuments");
                });

            modelBuilder.Entity("SmartCity.Data.Models.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Address", b =>
                {
                    b.HasOne("SmartCity.Data.Models.PollingPlace", "PollingPlace")
                        .WithMany("Addresses")
                        .HasForeignKey("PollingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollingPlace");
                });

            modelBuilder.Entity("SmartCity.Data.Models.AppUser", b =>
                {
                    b.HasOne("SmartCity.Data.Models.Address", null)
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.HasOne("SmartCity.Data.Models.PollingPlace", "PollingPlace")
                        .WithMany("Users")
                        .HasForeignKey("PollingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollingPlace");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Candidate", b =>
                {
                    b.HasOne("SmartCity.Data.Models.PollingPlace", "PollingPlace")
                        .WithMany()
                        .HasForeignKey("PollingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCity.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollingPlace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartCity.Data.Models.DocumentIssue", b =>
                {
                    b.HasOne("SmartCity.Data.Models.Document", "Document")
                        .WithMany("Issues")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCity.Data.Models.Issue", "Issue")
                        .WithMany("CompletedFiles")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCity.Data.Models.Issue", null)
                        .WithMany("DescribedFiles")
                        .HasForeignKey("IssueId1");

                    b.Navigation("Document");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Issue", b =>
                {
                    b.HasOne("SmartCity.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCity.Data.Models.IssueType", "IssueType")
                        .WithMany("Issues")
                        .HasForeignKey("IssueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCity.Data.Models.Organization", "Organisation")
                        .WithMany("Issues")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCity.Data.Models.PollingPlace", "PollingPlace")
                        .WithMany()
                        .HasForeignKey("PollingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("IssueType");

                    b.Navigation("Organisation");

                    b.Navigation("PollingPlace");
                });

            modelBuilder.Entity("SmartCity.Data.Models.IssueUser", b =>
                {
                    b.HasOne("SmartCity.Data.Models.AppUser", "AppUser")
                        .WithMany("IssueUser")
                        .HasForeignKey("AppUserId");

                    b.HasOne("SmartCity.Data.Models.Issue", "Issue")
                        .WithMany("IssueUsers")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("SmartCity.Data.Models.UserDocument", b =>
                {
                    b.HasOne("SmartCity.Data.Models.PollingPlace", "PollingPlace")
                        .WithMany()
                        .HasForeignKey("PollingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCity.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollingPlace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartCity.Data.Models.UserInfo", b =>
                {
                    b.HasOne("SmartCity.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SmartCity.Data.Models.AppUser", b =>
                {
                    b.Navigation("IssueUser");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Document", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Issue", b =>
                {
                    b.Navigation("CompletedFiles");

                    b.Navigation("DescribedFiles");

                    b.Navigation("IssueUsers");
                });

            modelBuilder.Entity("SmartCity.Data.Models.IssueType", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("SmartCity.Data.Models.Organization", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("SmartCity.Data.Models.PollingPlace", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
